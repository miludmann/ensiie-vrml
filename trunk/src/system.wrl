#VRML V2.0 utf8

## Protos

# Proto d'évitement d'obstacles
EXTERNPROTO Avoidance [
   eventIn      SFTime     updateRequest
	eventIn      SFVec3f    set_goal
   eventIn      SFString   set_state
	eventIn      MFNode     set_obstacles
	field        SFVec3f    goal 
   field        SFFloat    goalPriority 
	field        SFFloat    speed 
   field        SFString   state 
	field        MFNode     obstacles 
	exposedField SFVec3f    position 
   exposedField MFNode     children 
] "../protos/AvoidObstaclesPROTO.wrl"

# Proto de copie d'objets
EXTERNPROTO Copy [ 
                    field SFInt32    copies           
                    field SFVec3f    center           
                    field SFVec3f    translation      
                    field SFVec3f    scale            
                    field SFRotation scaleOrientation 
                    field SFRotation rotation         
                    field MFNode     children         
                   ] "../protos/CopyPROTO.wrl"


##
# Gestion des obstacles
##

PROTO ObstaclePlanete [
   exposedField SFVec3f position 0 0 0
   exposedField SFFloat repulsion 4
   field        SFFloat radius 0
]
{}


DEF SObstacle Script {
   eventIn  SFRotation set_pos_Theseus 
   eventIn  SFRotation set_pos_Acheron
   eventIn  SFRotation set_pos_Earth
   eventIn  SFRotation set_pos_Erebus
   eventIn  SFRotation set_pos_Antaeus

   eventOut SFVec3f goal_changed_Acheron
   eventOut SFVec3f goal_changed_Earth	
   eventOut SFVec3f goal_changed_Erebus
   eventOut SFVec3f goal_changed_Antaeus
   eventOut SFVec3f goal_changed_Theseus

   url ["javascript:
      function set_pos_Acheron(rot) {
		 goal_changed_Acheron = new SFVec3f(9000*Math.cos(rot.angle), 0, -(9000*Math.sin(rot.angle)));
      }
      function set_pos_Earth(rot) {
		 goal_changed_Earth = new SFVec3f(3090*Math.cos(rot.angle), 0, -(3090*Math.sin(rot.angle)));
      }
      function set_pos_Erebus(rot) {
		 goal_changed_Erebus = new SFVec3f(17750*Math.cos(rot.angle), 0, -(17750*Math.sin(rot.angle)));
      }
      function set_pos_Antaeus(rot) {
		 goal_changed_Antaeus = new SFVec3f(23040*Math.cos(rot.angle), 0, -(23040*Math.sin(rot.angle)));
      }
      function set_pos_Theseus(rot) {
		 goal_changed_Theseus = new SFVec3f(14000*Math.cos(rot.angle), 0, -(14000*Math.sin(rot.angle)));
      }
      "]
}

##
# Gestion de l'astre Exodus
# Equivalent du Soleil de notre cher système solaire, il est l'élément central
# de la scène, et ne se déplace donc pas.
##

PROTO ObstacleExodus [
   exposedField SFVec3f position 0 0 0
   exposedField SFFloat repulsion 4
   field        SFFloat radius 0
]
{
DEF _Exodus Transform {
	translation 0 0 0
	scale 5 5 5
			children [
				Inline { url "exodus.wrl" },
				
			]
		}
}
DEF	Exodus ObstacleExodus { position 0 0 0 radius 200 repulsion 200000000 }

##
# Gestion de la planète Terre, seule corps céleste représentant d'une planète
# réelle, du moins dans l'apparence.
# Planète de petite taille, proche du soleil, à la révolution rapide, et
# possédant une lune.
# C'est dessus que se trouve la base spatiale où se meuvent d'autres objets
# à une échelle très faible comparé au reste de la scène.
##	 

DEF EarthTs TimeSensor {
	cycleInterval 20
	loop TRUE
}

DEF Earth Transform {
	translation 0 0 0
	scale 1 1 1
			children [
				Inline { url "earth.wrl" },
				
			]
		}

DEF EarthOi OrientationInterpolator {
	key [ 0 .5 1 ]
	keyValue  [ 0 1 0 0, 0 1 0 3.14, 0 1 0 6.28,  ]
}

ROUTE EarthTs.fraction_changed TO EarthOi.set_fraction
ROUTE EarthOi.value_changed TO Earth.rotation

# Prise en compte du déplacement de la planète dans le calcul des positions des
# objets qui devront être évités par le vaisseau déplaçable :
# on déplace ici un second objet avec la planète qui a un certain de champ de répulsion
DEF	EarthObs ObstaclePlanete { position 3090 0 0 radius 100 repulsion 10000000 }

ROUTE EarthOi.value_changed TO SObstacle.set_pos_Earth
ROUTE SObstacle.goal_changed_Earth TO EarthObs.position

##
# Gestion de la planète Antaeus
# Planète moyenne, bleue, la plus excentrée, et à la révolution lente
##
DEF AntaeusTs TimeSensor {
	cycleInterval 1600
	loop TRUE
}

DEF Antaeus Transform {
	translation 0 0 0
	scale 1 1 1
			children [
				Inline { url "antaeus.wrl" },
				
			]
		}

DEF AntaeusOi OrientationInterpolator {
	key [ 0 .5 1 ]
	keyValue  [ 0 1 0 0, 0 1 0 3.14, 0 1 0 6.28,  ]
}

ROUTE AntaeusTs.fraction_changed TO AntaeusOi.set_fraction
ROUTE AntaeusOi.value_changed TO Antaeus.rotation

# Prise en compte du déplacement de la planète dans le calcul des positions des
# objets qui devront être évités par le vaisseau déplaçable :
# on déplace ici un second objet avec la planète qui a un certain de champ de répulsion
DEF	AntaeusObs ObstaclePlanete { position 23040 0 0 radius 1000 repulsion 20000000 }

ROUTE AntaeusOi.value_changed TO SObstacle.set_pos_Antaeus
ROUTE SObstacle.goal_changed_Antaeus TO AntaeusObs.position


##
# Gestion de la planète Acheron
# Planète massive, à la surface brunâtre
##	
DEF Acheron Transform {
	translation 0 0 0
	scale 1 1 1
			children [
				Inline { url "acheron.wrl" },
				
			]
		}

DEF AcheronTs TimeSensor {
	cycleInterval 120
	loop TRUE
}

DEF AcheronOi OrientationInterpolator {
	key [ 0 .5 1 ]
	keyValue [ 0 1 0 0, 0 1 0 3.14, 0 1 0 6.28,  ]
}

ROUTE AcheronTs.fraction_changed TO AcheronOi.set_fraction
ROUTE AcheronOi.value_changed TO Acheron.rotation

# Prise en compte du déplacement de la planète dans le calcul des positions des
# objets qui devront être évités par le vaisseau déplaçable :
# on déplace ici un second objet avec la planète qui a un certain de champ de répulsion
DEF	AcheronObs ObstaclePlanete { position 9000 0 0 radius 1000 repulsion 200000000 }

ROUTE AcheronOi.value_changed TO SObstacle.set_pos_Acheron
ROUTE SObstacle.goal_changed_Acheron TO AcheronObs.position

##
# Gestion de la ceinture d'astéroïdes
# Si le navigateur a tendance à être trop ralenti et les déplacement saccadés, il peut
# alors être nécessaire de diminuer le nombre d'astéroïdes présents.
# Pour cela, changer les deux champs "copies" qui détermine le nombre des corps rocheux.
#
# NB : pour des questions d'ergonomie et d'échelle, les astéroïdes sont traversables
# par le vaisseau déplaçable
##	
DEF Ceinture_asteroidesTs TimeSensor {
	cycleInterval 100
	loop TRUE
}

# Utilisation du proto de Copie pour créer une première boucle d'astéroides
DEF Ceinture_asteroides_H Transform {
	children [
		Copy {
		   copies 700 # CHAMP A MODIFIER SI LA VISUALISATION DE LA SCENE EST TROP RALENTIE
		   center 0 0 0
		   translation 1 0 0
		   rotation 0 1 0 0.45
		   scale 1 1 1
		   children [
    		  Transform {
				 translation -30 50 -10
				 children [
	    			Inline { url [ "asteroide.wrl" ] }
				   ]
    			  }
    		 ]
	 }
	]
}

DEF Ceinture_asteroidesPi OrientationInterpolator {
	key [ 0 .5 1 ]
	keyValue  [ 0 1 0 0, 0 1 0 3.14, 0 1 0 6.28,  ]
}

ROUTE Ceinture_asteroidesTs.fraction_changed TO Ceinture_asteroidesPi.set_fraction
ROUTE Ceinture_asteroidesPi.value_changed TO Ceinture_asteroides_H.rotation

# Utilisation du proto de Copie pour créer une seconde boucle d'astéroides
DEF Ceinture_asteroides_B Transform {
	children [
		Copy {
		   copies 500 # CHAMP A MODIFIER SI LA VISUALISATION DE LA SCENE EST TROP RALENTIE
		   center 0 0 0
		   translation 1 0 0
		   rotation 0 1 0 0.45
		   scale 1 1 1
		   children [
    		  Transform {
				 translation 0 -100 0
				 rotation 0 1 0 0.3
				 children [
	    			Inline { url [ "asteroide.wrl" ] }
				   ]
    			  }
    		 ]
	 }
	]
}

ROUTE Ceinture_asteroidesPi.value_changed TO Ceinture_asteroides_B.rotation

##
# Gestion de la planète Theseus
# Planète moyenne, à la surface jaune, et possèdant des anneaux elliptiques
##

DEF TheseusTs TimeSensor {
	cycleInterval 300
	loop TRUE
}

DEF Theseus Transform {
	translation 0 0 0
	scale 1 1 1
			children [
				Inline { url "theseus.wrl" },
				
			]
		}

DEF TheseusOi OrientationInterpolator {
	key [ 0 .5 1 ]
	keyValue  [ 0 1 0 0, 0 1 0 3.14, 0 1 0 6.28,  ]
}

ROUTE TheseusTs.fraction_changed TO TheseusOi.set_fraction
ROUTE TheseusOi.value_changed TO Theseus.rotation

# Prise en compte du déplacement de la planète dans le calcul des positions des
# objets qui devront être évités par le vaisseau déplaçable :
# on déplace ici un second objet avec la planète qui a un certain de champ de répulsion
DEF	TheseusObs ObstaclePlanete { position 14000 0 0 radius 1000 repulsion 115000000 }

ROUTE TheseusOi.value_changed TO SObstacle.set_pos_Theseus
ROUTE SObstacle.goal_changed_Theseus TO TheseusObs.position

##
# Gestion de la planète Erebus
# Planète de taille petite voire moyenne, verte
# Son cercle de révolution à la particularité d'être oblique par rapport
# au plan classique du système
##

DEF ErebusTs TimeSensor {
	cycleInterval 970
	loop TRUE
}

DEF Erebus Transform {
	translation 0 0 0
	scale 1 1 1
			children [
				Inline { url "erebus.wrl" },
				
			]
		}

DEF ErebusOi OrientationInterpolator {
	key [ 0 .5 1 ]
	keyValue  [ 0 1 0 0, 0 1 0 3.14, 0 1 0 6.28,  ]
}

ROUTE ErebusTs.fraction_changed TO ErebusOi.set_fraction
ROUTE ErebusOi.value_changed TO Erebus.rotation

# Prise en compte du déplacement de la planète dans le calcul des positions des
# objets qui devront être évités par le vaisseau déplaçable :
# on déplace ici un second objet avec la planète qui a un certain de champ de répulsion
DEF	ErebusObs ObstaclePlanete { position 17750 0 0 radius 1000 repulsion 200000000 }

ROUTE ErebusOi.value_changed TO SObstacle.set_pos_Erebus
ROUTE SObstacle.goal_changed_Erebus TO ErebusObs.position

##
# Gestion des vaisseaux se déplaçant de planète en planète
## 
DEF FleetTs TimeSensor {
	cycleInterval 15
	loop TRUE
}

DEF Fleet2Ts TimeSensor {
	cycleInterval 25
	loop TRUE
}

# Première flotte d'Imperial Destroyers
DEF Fleet Transform {
	children [

		DEF Fleet_base Transform {
			translation 9000 1000 0
			rotation 1 0 0 -1.57
			scale 7 7 7	
			children [
				Viewpoint {
					position 100 225 165
					orientation 0 -.5 -.85 -1.57
					description "Imperial destroyers"
				}
				Inline { url "destroyer.wrl" },
				Transform {
					translation	50 100 0
					children [
						Inline { url "destroyer.wrl" },
					]
				}
				Transform {
					translation	-50 100 0
					children [
						Inline { url "destroyer.wrl" },
					]
				}
				Sound {
				maxFront 200
				maxBack 200
				location 100 225 165
			
				source AudioClip { startTime 1
					stopTime 0
                 	  url  "../sounds/tie-fighter-fly-by2.wav" 
					loop TRUE
				}

		}
			]
}]}

# Seconde flottes de X-Wings
DEF Fleet2 Transform {

	children [

	Shape {
		  appearance Appearance {
    		material Material {
	    		diffuseColor	.8 .2 .5
	    		specularColor	.5 .5 .5
	    		shininess		0.2
    		}
		}
	}
		DEF Fleet2_base Transform {
			translation 4500 -1000 -7794
			rotation 0 1 0 1.57
			scale 30 30 30	
			children [
				Viewpoint {
					position 20 0 0
					orientation 0 .5 .15 1.57
					description "X-Wings"
				}
			   
				Inline { url "wing.wrl" },
				Transform {
					translation	0 -10 5
					children [
						Inline { url "wing.wrl" },
					]
				}
				Transform {
					translation	0 -10 -5
					children [
						Inline { url "wing.wrl" },
					]
				}
			]
}]}


DEF FleetOi OrientationInterpolator {
	key [ 0 .5 1 ]
	keyValue  [ 0 1 0 0, 0 1 0 -3.14, 0 1 0 -6.28,  ]
}

DEF Fleet2Oi OrientationInterpolator {
	key [ 0 .5 1 ]
	keyValue  [ 0 1 0 0, 0 1 0 -3.14, 0 1 0 -6.28,  ]
}

# Gestion du déplacement des vaisseaux : chaque flotte se déplace de la planète Acheron (massive, brune) à la planète
# Theseus (avec les anneaux), en se rapprochant progressiment par une approche en spirale
# Une fois arrivée à destination, la flotte atterit sur la planète, attend quelques instants puis repart vers l'autre planète.
DEF FleetScript Script { 
   eventIn  SFRotation set_pos
   eventIn  SFRotation set_pos2
   field    SFNode  fleet USE Fleet
   field    SFNode	fleet_base USE Fleet_base
   field    SFNode  fleet2 USE Fleet2
   field    SFNode	fleet2_base USE Fleet2_base
   field    SFNode  p1 USE Acheron
   field	SFNode  p2 USE Theseus
   field	SFNode	fOi USE	FleetOi
   field	SFFloat	dest 2
   field	SFFloat	wait 0
   field	SFFloat	dest2 2
   field	SFFloat	wait2 0	
   url ["javascript:

	  function set_pos(rot) {
		  var ap1 = p1.rotation.angle;
		  var ap2 = p2.rotation.angle;
		  var af = fleet.rotation.angle;
		  var current_pos = fleet_base.translation;

		  if(dest == 2){
			if(current_pos.x >= 14000)
			{ // On est au niveau de la planète de destination (la plus extérieure, p2)
				if((ap2 + af) > 6.25 && (ap2 + af) < 6.31 )
				{ // Le vaisseau et la planète de destination sont à la même position
					if(wait >= 2){
						fleet.scale = new SFVec3f(1, 1, 1);
						dest = 1;
						wait = 0;
					} else {
						fleet.scale = new SFVec3f(0, 0, 0);
						//fOi.keyValue = [new SFRotation(0, 1, 0, 0), new SFRotation(0, 1, 0, 3.14), new SFRotation(0, 1, 0, 6.28)]; 
						wait = wait + 1;
					}
				}
			 } else {
				 // On rapproche le vaisseau de la planète de destination
				fleet_base.translation =  new SFVec3f(current_pos.x +5000/100, current_pos.y - 125/100, 0);			 
			 }	
		  } else {
			if(current_pos.x <= 9000)
			{ // On est au niveau de la planète de destination (la plus intérieure, p1)
				if((ap1 + af) > 6.25 && (ap1 + af) < 6.31 )
				{  // Le vaisseau et la planète de destination sont à la même position
					if(wait >= 2){
						fleet.scale = new SFVec3f(1, 1, 1);
						dest = 2;
						wait = 0;
					} else {
						fleet.scale = new SFVec3f(0, 0, 0);
						wait = wait + 1;
					}
				}
			 } else {
				// On rapproche le vaisseau de la planète de destination
				fleet_base.translation =  new SFVec3f(current_pos.x -5000/100, current_pos.y + 125/100, 0);			 
			 }
		 }

	 }

	 	  function set_pos2(rot) {
		  var ap1 = p1.rotation.angle;
		  var ap2 = p2.rotation.angle;
		  var af2 = fleet2.rotation.angle;
		  var current_pos2 = fleet2_base.translation;

		  if(dest2 == 2){
			if(current_pos2.x >= 14000)
			{ // On est au niveau de la planète de destination (la plus extérieure, p2)
				if((ap2 + af2) > 6.25 && (ap2 + af2) < 6.31 )
				{ // Le vaisseau et la planète de destination sont à la même position
					if(wait2 >= 4){
						fleet2.scale = new SFVec3f(1, 1, 1);
						dest2 = 1;
						wait2 = 0;
					} else {
						fleet2.scale = new SFVec3f(0, 0, 0);
						wait2 = wait2 + 1;
					}
				}
			 } else {
				 // On rapproche le vaisseau de la planète de destination
				fleet2_base.translation =  new SFVec3f(current_pos2.x +5000/100, current_pos2.y + 125/100, 0);			 
			 }	
		  } else {
			if(current_pos2.x <= 9000)
			{ // On est au niveau de la planète de destination (la plus intérieure, p1)
				if((ap1 + af2) > 6.25 && (ap1 + af2) < 6.31 )
				{  // Le vaisseau et la planète de destination sont à la même position
					if(wait2 >= 4){
						fleet2.scale = new SFVec3f(1, 1, 1);
						dest2 = 2;
						wait2 = 0;
					} else {
						fleet2.scale = new SFVec3f(0, 0, 0);
						wait2 = wait2 + 1;
					}
				}
			 } else {
				// On rapproche le vaisseau de la planète de destination
				fleet2_base.translation =  new SFVec3f(current_pos2.x -5000/100, current_pos2.y - 125/100, 0);			 
			 }
		 }
	 }

      "]
}

ROUTE FleetTs.fraction_changed TO FleetOi.set_fraction
ROUTE FleetOi.value_changed TO Fleet.rotation
ROUTE FleetOi.value_changed TO FleetScript.set_pos

ROUTE Fleet2Ts.fraction_changed TO Fleet2Oi.set_fraction
ROUTE Fleet2Oi.value_changed TO Fleet2.rotation
ROUTE Fleet2Oi.value_changed TO FleetScript.set_pos2



##################################################################################################
# Traitement du vaisseau déplaçable et de ses collisions
PROTO Obstacle [
   exposedField SFVec3f position 0 0 0
   exposedField SFFloat repulsion 4
   field        SFFloat radius 4
]
{
   Transform {
      translation IS position
      children [
         Shape {
            appearance Appearance {
               material Material { emissiveColor 1 0 0 transparency .6 }
            }
            geometry Sphere { radius IS radius }
         }
      ]
   }
}

# Cible déplaçable ("carré" vert) manuellement que doit atteindre le vaisseau (fichier "ovni.wrl")
Transform {
   rotation 1 0 0 -1.57
   children [ ## in here its the XY plane, to match PlaneSensor
      DEF GOAL Transform {
         translation -5000 0 0
         children [
            Transform {
               translation 0 0 -.25
               scale 250 250 1
               children [
                  DEF CORNER Shape {
                     geometry IndexedLineSet {
                        coord Coordinate { point [ -.5 -.25 0, -.5 -.5 0, -.25 -.5 0 ] }
                        coordIndex [ 0 1 2 -1 ]
                        color Color { color [ 0 1 .4 ] }
                        colorIndex [ 0 0 0 -1 ]
                     }
                  }
                  Transform {
                     rotation 0 0 1 1.57
                     children [ USE CORNER ]
                  }
                  Transform {
                     rotation 0 0 1 -1.57
                     children [ USE CORNER ]
                  }
                  Transform {
                     rotation 0 0 1 3.1415
                     children [ USE CORNER ]
                  }
               ]
            }
         ]
      }
   ]
}

# Sol virtuel cliquable	: surface presque totalement transparente, circulaire, sur laquelle on peut
# maintenir un clic gauche de la souris pour déplacer la cible verte (même au-delà de cette zone)
# La surface ne couvre pas totalement le système pour pouvoir encore autoriser des déplacement
# manuels des points de vue
#
# NB : ne pas hésiter à diminuer le taux de transparence si ce "sol" n'est pas visible sur votre écran
Transform {
   translation 0 -1 0
   rotation 0 0 0 -1.57
   children [ 
      DEF PS PlaneSensor {}
      Shape {
         appearance Appearance {
            material Material { diffuseColor .4 .4 .4
				transparency 0.95 } # A MODIFIER SI NECESSAIRE POUR ETRE VISIBLE}
         }
         geometry Cylinder { height 1 radius 13000 }
      }
   ]
}

# Utilisation du proto d'évitement
DEF A Avoidance {
   position 5000 0 0
   goal     -5000 0 0
   speed    1200
   obstacles [
	  # Corps qui seront non traversables par l'objet déplaçable
	  # (Voir plus haut pour la définition de chacun de ces astres et la
	  # manière de gérer les objets à éviter en mouvement)
      USE Exodus
	  USE AcheronObs
	  USE EarthObs
	  USE AntaeusObs
	  USE ErebusObs
	  USE TheseusObs
   ]
   children  [ 
	   Transform {
		   scale 100 100 100
		   rotation	0 0 0 -1.57
		   children [
				Inline { url [ "ovni.wrl" ] }
			]	
		}

   ]
}

DEF S Script { 
   eventIn  SFVec3f set_pos
   field    SFNode  g USE GOAL
   field    SFNode  p USE PS
   field    SFVec3f offset 0 0 0
   eventOut SFVec3f goal_changed
   url ["javascript:
      function set_pos(pos) {
         var mv = offset.add(pos);
         goal_changed = new SFVec3f(mv.x, 0, -mv.y);
      }
      function initialize() {
         p.set_offset = g.translation;
         set_pos(g.translation);
      }
      "]
}

DEF TIME TimeSensor { cycleInterval 10 loop TRUE }

ROUTE TIME.time TO A.updateRequest
ROUTE PS.translation_changed TO GOAL.set_translation
ROUTE PS.translation_changed TO S.set_pos
ROUTE S.goal_changed TO A.set_goal

